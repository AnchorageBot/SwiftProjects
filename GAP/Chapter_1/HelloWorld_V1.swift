// Created by Anthropic's AI Claude on 5 June, 2024

// Abstract:
// This script demonstrates the use of a genetic algorithm to guess a target phrase.
// It generates an initial random guess and iteratively mutates it to improve its fitness.
// The fitness is determined by comparing each character of the guess with the corresponding
// character of the target phrase. The algorithm continues until the guess matches the target.

import Foundation

// Gene set aka the problem space
let geneSet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#. 1234567890"

// Target phrase to solve
let target = " Hello World 1.1 !"

// Guess function
func generateParent(length: Int) -> String {
    """
    Generate a random string from the gene set.
    
    - Parameter length: The desired length of the generated string.
    - Returns: A random string of the specified length.
    """
    var genes: [Character] = []
    while genes.count < length {
        let sampleSize = min(length - genes.count, geneSet.count)
        genes.append(contentsOf: geneSet.shuffled().prefix(sampleSize))
    }
    return String(genes)
}

// Fitness function
func getFitness(_ guess: String) -> Int {
    """
    Evaluate the fitness of the guess.
    
    - Parameter guess: The guess string to evaluate.
    - Returns: The fitness score of the guess.
    """
    return zip(target, guess).reduce(0) { $1.0 == $1.1 ? $0 + 1 : $0 }
}

// Mutation function
func mutate(_ parent: String) -> String {
    """
    Create a new guess via random mutation of the old guess.
    
    - Parameter parent: The parent string to mutate.
    - Returns: A new string with a random mutation.
    """
    var childGenes = Array(parent)
    let index = Int.random(in: 0..<parent.count)
    let (newGene, alternate) = geneSet.shuffled().prefix(2).map { String($0) }
    childGenes[index] = childGenes[index] == newGene.first! ? alternate.first! : newGene.first!
    return String(childGenes)
}

// Display function
func display(_ guess: String) {
    """
    Display the progress of the genetic algorithm.
    
    - Parameter guess: The current guess string.
    """
    let timeDiff = Date().timeIntervalSince(startTime)
    let fitness = getFitness(guess)
    print("\(guess)\t\(fitness)\t\(timeDiff)")
}

// Main program
let startTime = Date()
var bestParent = generateParent(length: target.count)
var bestFitness = getFitness(bestParent)
display(bestParent)

// While loop
while true {
    let child = mutate(bestParent)
    let childFitness = getFitness(child)
    if bestFitness >= childFitness {
        continue
    }
    display(child)
    if childFitness >= bestParent.count {
        break
    }
    bestFitness = childFitness
    bestParent = child
}

/*

This genetic algorithm demonstrates how an initial random guess can be iteratively improved through mutation and selection based on fitness to eventually converge towards the target phrase.

Comments:

- The script begins by defining the geneSet, which is the set of characters that can be used to construct the guess string.
- The target constant represents the phrase that the algorithm aims to guess.
- The generateParent function generates a random string of a specified length using characters from the geneSet. It shuffles the geneSet and takes a random sample of characters to construct the initial guess.
- The getFitness function evaluates the fitness of a guess by comparing each character of the guess with the corresponding character of the target phrase. It returns the count of matching characters.
- The mutate function creates a new guess by randomly mutating a single character of the parent guess. It selects a random index and replaces the character at that index with a different character from the geneSet.
- The display function is used to display the progress of the genetic algorithm. It prints the current guess, its fitness score, and the elapsed time since the start of the algorithm.
- In the main program, the startTime is recorded to keep track of the elapsed time.
- The bestParent is initialized with a random guess of the same length as the target phrase using the generateParent function.
- The bestFitness is calculated for the initial guess using the getFitness function.
- The algorithm enters a while loop that continues until the guess matches the target phrase.
- Inside the loop, a new child guess is generated by mutating the bestParent using the mutate function.
- The childFitness is calculated for the new guess.
- If the childFitness is not better than the bestFitness, the loop continues to the next iteration.
- If the childFitness is better, the display function is called to print the progress, and the bestFitness and bestParent are updated with the new values.
- If the childFitness is equal to the length of the target phrase, indicating a perfect match, the loop breaks, and the algorithm terminates.

*/
