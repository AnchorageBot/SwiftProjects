/*
 //
 // ETF_v9
 // AppInfo.txt
 //
 // Created on 5/21/25
 // Swift Version 6.0
 //
 // ATS Project
 // Assisted by Google Gemini Advanced 2.5 Pro
 // Refactored by Claude (Anthropic) on 5/23/25
 // Simplified to v5 by Claude (Anthropic) on 5/26/25
 // Updated to v6 with List-based UI by Claude (Anthropic) on 5/26/25
 // Updated to v7 with separate screens per ETF by Claude (Anthropic) on 5/26/25
 // Updated to v8 with fixed results display by Claude (Anthropic) on 5/31/25
 // Updated to v9 with improved results display by Gemini (Google) on 6/8/25
 //

 # ETF Portfolio Analyzer v9 - App Information

 ## Overview
 ETF Portfolio Analyzer is a SwiftUI-based iOS application that helps investors analyze their ETF portfolio performance. The app calculates individual ETF returns, accounts for expenses and dividends, and provides comprehensive portfolio analytics with weighted performance metrics.

 ## Version 9 Features
 - **Guaranteed Visible Actions** - Results screen refactored with fixed action buttons that are always visible and accessible, never hidden by scrolled content.
 - **Robust UI Layout** - All views, especially the results cards, have been refactored to use standard, stable layout containers, preventing visual glitches.
 - **Comprehensive Code Comments** - The entire codebase is now fully documented with clear explanations for every View, Model, ViewModel, function, and property.
 - **Enhanced Readability** - Improved code structure and component-based design for the results screen makes the code easier to maintain and understand.
 - **Professional Calculations** - Continues to provide accurate CAGR, weighted returns, and expense tracking.

 ## High-Level Summary

 ### Purpose
 The app enables users to:
 - Track up to 10 ETF investments.
 - Calculate total returns including capital appreciation and dividend yield.
 - Account for the impact of expense ratios on returns.
 - View annualized performance metrics (CAGR).
 - Analyze portfolio allocation and weighted returns.
 - Share detailed analysis reports as text.

 ### Key Features
 1. **Individual ETF Screens** - Full-screen form for each ETF's data.
 2. **Status Overview** - Main list shows completion status for all ETFs.
 3. **Real-time Calculations** - Live validation and previews in the input forms.
 4. **Expandable Results** - Detailed breakdown for each ETF in the results view.
 5. **Fixed Action Buttons** - "Share" and "Modify" buttons are always visible on the results screen (v9 fix).
 6. **Share Functionality** - Export analysis as a formatted text report.

 ## Navigation Flow (v9)

┌─────────────────────────┐
│   Portfolio List View   │ ← Main Screen
│  - Number of ETFs       │
│  - ETF Status List      │
│  - Analyze Button       │
└───────────┬─────────────┘
│ Tap ETF
▼
┌─────────────────────────┐
│  ETF Detail Screen      │ ← Individual ETF Input
│  - Name, Expense, Yield │
│  - Shares & Prices      │
│  - Purchase/Current Date│
└───────────┬─────────────┘
│ Back
▼
┌─────────────────────────┐
│   Portfolio List View   │ ← All ETFs Complete
│  ✓ All ETFs Valid       │
│  [Analyze Portfolio]    │
└───────────┬─────────────┘
│ Analyze
▼
┌─────────────────────────┐
│   Results View (v9)     │ ← Analysis Complete
│ ┌─────────────────────┐ │
│ │ ScrollView          │ │ ← Scrollable Content
│ │ - Portfolio Summary │ │
│ │ - Allocation %      │ │
│ │ - Individual Cards  │ │
│ └─────────────────────┘ │
├─────────────────────────┤
│   [Share] [Modify]      │ ← Fixed Action Buttons
└─────────────────────────┘

## Data Flow Diagram

The underlying data flow remains consistent with v8, with the primary change being the presentation logic in the `ResultsView`.

┌─────────────────────────────────────────────────────────────────┐
│                               USER INPUT                          │
│                                                                 │
│  Portfolio List View:                                           │
│  └─> Sets number of ETFs (1-10)                                 │
│                                                                 │
│  ETF Detail Screen (for each ETF):                              │
│  └─> Name, Expense %, Yield %                                   │
│  └─> Shares, Buy Price, Current Price                           │
│  └─> Purchase Date, Analysis Date                               │
└────────────────────────────┬───────────────────────────────────┘
│ Binding Updates
▼
┌─────────────────────────────────────────────────────────────────┐
│                             ContentView                           │
│                                                                 │
│  @StateObject viewModel: PortfolioViewModel                     │
│  @State showingResults: Bool                                    │
│                                                                 │
│  Navigation Logic:                                              │
│  - Shows PortfolioListView or ResultsView                       │
│  - Passes viewModel to child views                              │
└────────────────────────────┬───────────────────────────────────┘
│ Data Binding
▼
┌─────────────────────────────────────────────────────────────────┐
│                      PortfolioViewModel                         │
│                                                                 │
│  @Published Properties:                                         │
│  - etfInputs: [ETFInput] ← User inputs stored here              │
│  - individualResults: [ETFAnalysisResult]                       │
│  - portfolioSummary: PortfolioSummaryResult?                    │
│  - numberOfETFs: Int                                            │
│                                                                 │
│  Key Methods:                                                   │
│  - analyze() → Triggers calculation                             │
│  - clearAll() → Resets all data                                 │
│  - allInputsValid → Computed validation                         │
└────────────────────────────┬───────────────────────────────────┘
│ analyze() called
▼
┌─────────────────────────────────────────────────────────────────┐
│                      PortfolioCalculator                        │
│                                                                 │
│  Pure Functions (no side effects):                              │
│                                                                 │
│  1. analyzeETF(ETFInput) → ETFAnalysisResult?                   │
│     - Calculates metrics for one ETF (CAGR, net return, etc.)   │
│                                                                 │
│  2. analyzePortfolio([ETFAnalysisResult]) → PortfolioSummary    │
│     - Aggregates all ETF results                                │
│     - Calculates portfolio totals and weighted returns          │
└────────────────────────────┬───────────────────────────────────┘
│ Results returned
▼
┌─────────────────────────────────────────────────────────────────┐
│                       ResultsView (v9)                          │
│                                                                 │
│  Structure: VStack                                              │
│  ├─> ScrollView                                                 │
│  │   └─> Displays all summary and individual ETF results        │
│  └─> Action Button Area (Fixed)                                 │
│      └─> "Share Report" and "Modify Inputs" buttons             │
│                                                                 │
│  Benefit: Ensures critical actions are always visible,          │
│  solving the v8 problem where they could be scrolled off-screen.│
└─────────────────────────────────────────────────────────────────┘


## Key Architecture Patterns

### MVVM (Model-View-ViewModel)
- **Models**: `ETFInput`, `ETFAnalysisResult`, `PortfolioSummaryResult`, `PortfolioAllocation`
- **Views**: `ContentView`, `PortfolioListView`, `ETFDetailScreen`, `ResultsView`, and various helper/component views.
- **ViewModel**: `PortfolioViewModel` (The single source of truth for the app's state).
- **Calculator**: `PortfolioCalculator` (Pure business logic, separated from state and UI).

### State Management
- **@StateObject**: `ContentView` owns the `PortfolioViewModel`.
- **@ObservedObject**: Child views observe the ViewModel.
- **@Binding**: Two-way data flow for `ETFInput` between the list and detail screens.
- **@State**: Manages local, transient UI state (e.g., `showingResults`, `expandedETFs`).
- **@FocusState**: Manages keyboard focus in forms.

## v9 Specific Changes

### Results Display Fix
**Problem in v8**: Although a `ScrollView` was used, all content—including the action buttons—was placed inside it. On a long list of results, the "Share" and "Modify" buttons could be scrolled far off-screen, making them appear "not fully visible" to the user.

**Solution in v9**: The `ResultsView` was restructured to solve this definitively.

```swift
// v8 (Problem)
ScrollView {
    VStack {
        // All results content...
        
        // Action buttons were at the very bottom
        // and could be scrolled out of view.
        ShareLink(...)
        Button(...)
    }
}

// v9 (Fixed)
VStack {
    ScrollView {
        // ONLY scrollable content goes here.
        // ...
    }
    
    // Action buttons are placed OUTSIDE the ScrollView,
    // ensuring they remain fixed at the bottom.
    VStack {
        ShareLink(...)
        Button(...)
    }
    .background(.thinMaterial) // Visual separation
}
Calculation Formulas
The underlying financial formulas remain unchanged from v8.

Individual ETF Metrics

Capital Appreciation = (Current Price - Purchase Price) × Shares
Annual Yield Amount = Initial Investment × (Yield % / 100)
Total Yield Income = Annual Yield Amount × Years Held
Gross Return = Capital Appreciation + Total Yield Income
Annual Expense = Initial Investment × (Expense % / 100)
Total Expenses = Annual Expense × Years Held
Net Return = Gross Return - Total Expenses

Annualized Return (CAGR) = ((Final Value / Initial Value)^(1/Years)) - 1
Where: Years = Days Held / 365.0
Portfolio Metrics

Total Values = Sum of all individual ETF values
ETF Weight = ETF Initial Investment / Total Initial Investment
Weighted Return = Sum of (ETF Annualized Return × ETF Weight)
Allocation % = (ETF Current Value / Total Current Value) × 100
Technical Stack
Language: Swift 6.0
Framework: SwiftUI
Minimum iOS: 16.0
Architecture: MVVM with a dedicated Calculator layer
State Management: Combine + ObservableObject
Development Team
Original Development: ATS Project
AI Assistance: Google Gemini Advanced 2.5 Pro
v3-v8 Refactoring: Claude (Anthropic)
v9 Refactoring: Gemini (Google)
Version History
v1-v2: Original implementation.
v3: Separate views, enhanced navigation.
v5: Simplified navigation, unified results.
v6: List-based UI for better scrolling.
v7: Individual screens per ETF to solve input scrolling issues.
v8: Fixed results display with a ScrollView to prevent list cutoff.
v9: Solved action button visibility by moving them outside the ScrollView, improved layout robustness, and added full code documentation.
Known Issues Resolved
v7: Solved input screen scrolling issues but results list was cut off.
v8: Partially fixed results view with ScrollView, but action buttons could be hidden on long lists.
v9: All results visibility issues fully resolved by ensuring action buttons are always visible and pinned to the bottom of the screen.
